install.packages("dplyr")
library(dplyr)
qunif(0.75,0,1)
quantile(qunif(0.75,0,1))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp
mean(temp)
quantile(temp)
clear()
clear
rm()
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:jsonlite", unload=TRUE)
install.packages("jsonlite")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("Rcpp")
install.packages("knitr")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("slidify")
qnorm(mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 7.5)
sessionInfo()
install.packages("cacher")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
swirl()
33/36
deck
52
4/52
0
12/52
2
2/51
0.64
0.64
mypdf
integrate(mypdf, lower = 0, upper = 1.6)
sqrt(2)
0.997*0.001
(1-0.997)*(1-0.001)
(1-0.985)*(1-0.001)
0.000997/(0.997*0.001 + 0.002997)
0.000997/(0.997*0.001 + 0.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh+1dl)
0.5*(edh+edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, mean)
apply(mean, allsam)
apply(allsam, 1, mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5
ex2_fair - 3.5^2
edh
sum(dice_high*dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(n)
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3) * 0.8^3 * (1-0.8)^(5-3)
choose(5,3) * 0.8^3 * (1-0.8)^(5-3)+ choose(5,4) * 0.8^4 * (1-0.8)^(5-4)+ choose(5,5) * 0.8^5 * (1-0.8)^(5-5)
pbinom(quantile = 2, size = 5, prob = 0.8, lower.tail = FALSE)
pbinom(q = 2, size = 5, prob = 0.8, lower.tail = FALSE)
qnorm(q = 0.10)
qnorm(p = 0.10)
0
qnorm(p = 0.975, 3, 2)
3+4*0.975
3+2*1.96
pnorm(1200, 1020, 50, lower.tail = FALSE)
pnorm()
pnrom((1200-1020)/50)
pnorm((1200-1020)/50)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(0.75, 1020, 50, lower.tail = TRUE)
1
0.53
0.53
ppois(3, 2.5*4)
pbinom(0.005, 1000, 0.01)
pbinom(5, 1000, 0.01)
ppois(5, 1000*0.01)
baseline = c(140, 138, 150, 148, 135)
week2 = c(132, 135, 151, 146, 130)
mean1 = mean(baseline)
mean2 = mean(week2)
std1 = std(baseline)
std1 = sd(baseline)
std2 = sd(week2)
n1 = length(baseline)
n2 = length(week2)
stdmean1 = std1/sqrt(n1)
stdmean2 = std2/sqrt(n2)
power.t.test(n1, mean1-mean2)
power.t.test(n1, mean1-mean2, std1)
power.t.test(n1, mean1-mean2, std2)
power.t.test(n1, mean1-mean2, sqrt(std1^2+std2^2))
power.t.test(n1, mean1-mean2, sqrt((std1^2+std2^2)/2))
power.t.test(n1, mean1-mean2, (std1+std2)/2)
power.t.test(n=9, sd=30)
power.t.test(n=9, sd=30, delta = NULL)
power.t.test(n = 9, delta = NULL, sd = 30)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.975)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.95)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.975)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05)$power
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.95)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.025)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.975)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.975, strict = TRUE)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.95, strict = TRUE)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.975, strict = TRUE)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.05, strict = TRUE)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.025, strict = TRUE)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.95, strict = TRUE)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.975, strict = TRUE)
power.t.test(n = 9, delta = NULL, sd = 30, sig.level = 0.05, power = 0.975, type = "one.sample", strict = TRUE)
power.t.test(n = 4, delta = 3-2, sd = 2, alternative = "one.sided", strict = TRUE)
power.t.test(n = 4, delta = 3-2, alternative = "one.sided", strict = TRUE)
power.t.test(n = 4, delta = 3-2, sd = 2, alternative = "one.sided", strict = TRUE)
power.t.test(n = 4, delta = 3-2, alternative = "one.sided")
power.t.test(n = 4, delta = 3-4, alternative = "one.sided")
power.t.test(n = 4, delta = 3-2, alternative = "one.sided")
power.t.test(n = 4, delta = 3-2, type = "two.sample", alternative = "one.sided")
power.t.test(n = 4, delta = 3-2, type = "paired", alternative = "one.sided")
power.t.test(n = 4, delta = 3-2, type = "two.sample", alternative = "one.sided")
power.t.test(n = 4, delta = 3-2, type = "two.sample", alternative = "one.sided", strict = TRUE)
power.t.test(n = 10, delta = 10/1787 - 1/100, type = "two.sample", alternative = "one.sided", strict = TRUE)
power.t.test(n = 10, delta = 10/1787 - 1/100, type = "one.sample", alternative = "one.sided", strict = TRUE)
power.t.test(n = 10, delta = 1/100 - 10/1787, type = "one.sample", alternative = "one.sided", strict = TRUE)
power.t.test(n = 10, delta = 1/100 - 10/1787, type = "two.sample", alternative = "one.sided", strict = TRUE)
power.t.test(n = 10, delta = 1/100 - 10/1787, type = "one.sample", alternative = "one.sided", strict = TRUE)
power.t.test(n = 10, delta = 1/100 - 10/1787, type = "paired", alternative = "one.sided", strict = TRUE)
power.t.test(n = 1787, delta = 1/100 - 10/1787, type = "one.sample", alternative = "one.sided", strict = TRUE)
power.t.test(n = 1787, delta = 1/100 - 10/1787, type = "paired", alternative = "one.sided", strict = TRUE)
power.t.test(n = 1787, delta = 1/100 - 10/1787, type = "two.sample", alternative = "one.sided", strict = TRUE)
power.t.test(n = 1787, delta = 1/100 - 10/1787, type = "two.sample", alternative = "one.sided")
power.t.test(n = 10, delta = 1/100 - 10/1787, type = "two.sample", alternative = "one.sided")
power.t.test(n = 1787, delta = 1/100 - 10/1787, type = "two.sample", alternative = "one.sided")
power.t.test(delta = 1/100 - 10/1787, type = "two.sample", alternative = "one.sided")
power.t.test(n = 9, delta = -3-1, sd = (1.5+1.8)/2, type = "paired", alternative = "two.sided")
power.t.test(n = 9, delta = -3-1, type = "paired", alternative = "two.sided")
power.t.test(n = 9, delta = -3-1, sd = (1.5+1.8)/2, type = "paired", alternative = "two.sided")
power.t.test(n = 9, delta = -3-1, type = "one.sample", alternative = "two.sided")
power.t.test(n = 9, delta = 1078-1100, sd = 11.5, type = "one.sample", alternative = "two.sided")
power.t.test(n = 9, delta = 1100-1078, sd = 11.5, type = "one.sample", alternative = "two.sided")
power.t.test(n = 100, sd = 0.01, type = "one.sample", alternative = "one.sided")
power.t.test(n = 100, delta = 0.01, sd = 0.04, type = "one.sample", alternative = "one.sided")
power.t.test(delta = 0.01, sd = 0.04, power = 0.90, type = "one.sample", alternative = "one.sided")
install.packages("UsingR")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
w*x
sum(w*x)
sum(w*x)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x*y)/sum(x^2)
data(mtcars)
mtcars$mpg
mtcars$weight
mtcars$weightmtcars
mtcars
mtcars$wt
x <- mtcars$wt
x <- mtcars$mpg
x <- mtcars$wt
y <- mtcars$mpg
cor(y,x)*sd(y)/sd(x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
8.58-9.31
x[1]
(x[1]-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- cov(y,x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
beta0
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
beta0
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- x^2
y
sum(x)/length(x)
clear
rm(list())
rm(ls = list())
list()
ls = list()
list(ls)
ls
rm
rm(list=ls())
ls
exit
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
beta1 <- sum(x*y)/sum(x^2)
beta1
cor(x,y)
cor(y,x)
cor(y,x)*sd(y)/sd(x)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta1
lm(y~ x)
beta0 <- mean(y) - beta1*mean(x)
beta0
plot(x, lm(y~x))
plot(x, y, abline(lm(y ~ x)))
plot(x, y, abline(resid(lm(y ~ x))))
plot(x, y, abline(lm(y ~ x)))
plot(x, y)
abline(lm(y ~ x))
plot(x, y)
abline(lm(y ~ x))
plot(x, resid(lm(y~x)))
abline(lm(y ~ x))
plot(x, resid(lm(y~x)))
abline(resid(lm(y ~ x)))
plot(x, resid(lm(y ~ x)))
abline(h = 0)
plot(x, y)
abline(lm(y ~ x))
plot(x, resid(lm(y ~ x)))
abline(h = 0)
sqrt(sum(resid(lm(y~x)^2))/(n-2))
sqrt(sum(resid(lm(y~x))^2)/(n-2))
n <- length(x)
sqrt(sum(resid(lm(y~x))^2)/(n-2))
sigma <- sqrt(sum(resid(lm(y~x))^2)/(n-2))
summary(lm(y~x))
summary(lm(y~x))$sigma
sigma <- summary(lm(y~x))$sigma
sigma <- summary(lm(y~x))$Error
sigma
sigma <- summary(lm(y~x))$Coefficients
sigma
sigma <- sqrt(sum(resid(lm(y~x))^2)/(n-2))
sigma <- summary(lm(y~x))$sigma
sigma
sigmabeta1 <- sigma/sqrt(sum((x-mean(x))^2))
sigmabeta1
tbeta1 <- (beta1 - 0)/sigmabeta1
pt(abs(tbeta1))
pt(abs(tbeta1), df = n-2)
pt(abs(tbeta1), df = n-2, lower.tail = FALSE)
2* pt(abs(tbeta1), df = n-2, lower.tail = FALSE)
data(mtcars)
lm(mpg ~ wt, outcome)
lm(mpg ~ wt, mtcars)
avgwt <- mean(wt)
avgwt <- mean(mtcars$wt)
avgmpg <- mean(mtcars$mpg)
lm(mpg ~ wt, mtcars)$wt
summary(lm(mpg ~ wt, mtcars))
summary(lm(mpg ~ wt, mtcars))$wt
summary(lm(mpg ~ wt, mtcars))$coefficients
sumcoeff <- summary(lm(mpg ~ wt, mtcars))$coefficients
sumcoeff
sumcoeff[2,1]+2*sumcoeff[2,2]
sumcoeff[2,1]-2*sumcoeff[2,2]
mpgup <- sumcoeff[2,1]+2*sumcoeff[2,2]
mpghigh <- sumcoeff[2,1]+2*sumcoeff[2,2]
mpglow <- sumcoeff[2,1]-2*sumcoeff[2,2]
mpghigh*3000
mpghigh
sumcoeff
sumcoeff[1,1] + 3000*sumcoeff[2,1]
sumcoeff[1,2] + 3000*sumcoeff[2,2]
sumcoeff[1,2] - 3000*sumcoeff[2,2]
sumcoeff[1,2] + 3000*sumcoeff[2,2]/1000
sumcoeff[1,2] - 3000*sumcoeff[2,2]/1000
sumcoeff[1,2] + 2*3000*sumcoeff[2,2]/1000
sumcoeff[1,2] - 2*3000*sumcoeff[2,2]/1000
mpghigh <- sumcoeff[1,1] + sumcoeff[2,1]*(3000/1000) + 2*(3000/1000)*sumcoeff[2,2]
mpghigh
mpghigh <- sumcoeff[1,1] + sumcoeff[2,1]*(3000/1000) + (3000/1000)*sumcoeff[2,2]
mpghigh
mpghigh <- sumcoeff[1,1] + sumcoeff[2,1]*(3000/1000) + 2*(3000/1000)*sumcoeff[2,2]
mpghigh
mpghigh <- sumcoeff[1,1] + sumcoeff[2,1]*(3000/1000) + 2*sumcoeff[1,2] + 2*(3000/1000)*sumcoeff[2,2]
mpghigh
mpghigh <- sumcoeff[1,1] + (sumcoeff[2,1]+2*sumcoeff[2,2])*(3000/1000)
mpghigh
mpghigh <- (sumcoeff[1,1]+2*sumcoeff[1,2]) + (sumcoeff[2,1]+2*sumcoeff[2,2])*(3000/1000)
x <- mtcars$wt
y <- mtcars$mpg
lm(y ~ x)
summary(lm(y ~ x))
summary(lm(y ~ x))$coefficients
summary(lm(y ~ x))$coefficients$x
coeffs <- summary(lm(y ~ x))$coefficients
coeffs
coeffs$x
coeffs$Estimate
beta0 <- coeffs[1,1]
beta1 <- coeffs[2,1]
sum((y-(beta0+beta1*x))^2)
num <- sum((y-(beta0+beta1*x))^2)
summary(lm(y ~ x -1))$coefficients
coeffs <- summary(lm(y ~ x - 1))$coefficients
coeffs
beta0 <- coeffs[1,1]
beta1 <- coeffs[1,1]
beta0 <- 1
den <- sum((y-(beta0+beta1*x))^2)
num/den
beta0 <- 0
den <- sum((y-(beta0+beta1*x))^2)
num/den
coeffs <- summary(lm(y ~ x - 2))$coefficients
coeffs <- summary(lm(y ~ x - 1))$coefficients
coeffs
coeffs <- summary(lm(y ~ x - 0))$coefficients
coeffs
coeffs <- summary(lm(y ~ 0+ x))$coefficients
coeffs
coeffs <- summary(lm(y ~ x))$coefficients
coeffs
coeffs <- summary(lm(y ~ x -2))$coefficients
coeffs <- summary(lm(y ~ x +1))$coefficients
coeffs
coeffs <- summary(lm(y ~ x))$coefficients
num/den
coeffs <- summary(lm(y ~ 1))$coefficients
beta0 <- coeffs[1,1]
coeffs
beta0 <- coeffs[1,1]
beta1 <- 0
den <- sum((y-(beta0+beta1*x))^2)
num/den
resid(lm(y~1))
res <- resid(lm(y~1))
sum((res)^2)
sum(res)
rm(list = ls())
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
lm(y ~ x)
fit <- lm(y ~ x)
summary(fit)
fit$coefficients
fit$coefficients[1]
fit$coefficients[1,1]
fit$coefficients[1]
fit$coefficients[1]*2
fit$coefficients
beta0 <- fit$coefficients[1]
beta1 <- fit$coefficients[2]
xcar <- 3000/1000
beta0 + xcar*beta1
ycar <- beta0 + xcar*beta1
fit$coefficients
fit
summary(fit)
summary(fit)$coefficients
coeffs <- summary(fit)$coefficients
sigmabeta0 <- coeffs[1,2]
sigmabeta1 <- coeffs[2,2]
sigmaycar <- sigmabeta0 + xcar*sigmabeta1
ycar +2*sigmaycar
sigmaycar <- sqrt(sigmabeta0^2 + xcar^2*sigmabeta1^2)
ycar +2*sigmaycar
xcar <- 1
ycar <- beta0 + xcar*beta1
ycar
sigmaycar <- sigmabeta0 + xcar*sigmabeta1
ycar +2*sigmaycar
ycar - 2*sigmaycar
xcar <- 2
ycar <- beta0 + xcar*beta1
ycar
sigmaycar <- sigmabeta0 + xcar*sigmabeta1
ycar +2*sigmaycar
ycar - 2*sigmaycar
ycar - 2*sigmaycar
ycar
ycar - 2*sigmaycar
coeff
coeffs
coeffs[1.1] + c(-1,1)*qt(0.975, df = fit$df)*coeffs[1,2]
coeffs[1,1] + c(-1,1)*qt(0.975, df = fit$df)*coeffs[1,2]
coeffs[2,1] + c(-1,1)*qt(0.975, df = fit$df)*coeffs[2,2]
coeffs[1,1]
coeffs[1,1]+mean(x)*coeffs[2,1]
coeffs[1,1]+mean(x)*(coeffs[2,1]+ c(-1,1)*qt(0.975, df = fit$df)*coeffs[2,2])
mean(x)
coeffs[1,1]+mean(x)*(coeffs[2,1]+ 2*c(-1,1)*qt(0.975, df = fit$df)*coeffs[2,2])
coeffs[1,1]+mean(x)*(coeffs[2,1]+ c(-1,1)*qt(0.975, df = fit$df)*coeffs[2,2])
coeffs[1,1]+mean(x)*(coeffs[2,1]+ c(-1,1)*qt(0.95, df = fit$df)*coeffs[2,2])
coeffs[1,1]+mean(x)*(coeffs[2,1]+ c(-1,1)*qt(0.975, df = fit$df)*coeffs[2,2])
summary(fit)
coeffs
sigmabeta0 <- coeffs[1,2]
sigmabeta1 <- coeffs[2,2]
n <- lenght(x)
n <- length(x)
se2 <- sigma * sqrt(1 + 1 / n + (x - mean(x))^2/sum((x-mean(x))^2))
se2 <- sqrt(1 + 1 / n + (x - mean(x))^2/sum((x-mean(x))^2))
se2
se2 <- sqrt(1 + 1 / n + (mean(x) - mean(x))^2/sum((x-mean(x))^2))
se2
beta0 + beta1*mean(x)
beta0 + beta1*mean(x) + se2
beta0 + beta1*mean(x) -2*se2
beta0 + beta1*mean(x)
se2 <- sqrt(1 + 1 / n + (2 - mean(x))^2/sum((x-mean(x))^2))
se2
2*se2
sigma = sqrt(sum((y-beta0-beta1*x)^2)/(n-2))
se2 <- sigma*sqrt(1 + 1 / n + (mean(x) - mean(x))^2/sum((x-mean(x))^2))
se2
ycar
ycar-2*se2
mean(y)-2*se2
beta0+beta1*mean(x)-2*se2
beta0+beta1*mean(x)-se2
se2
beta0+beta1*mean(x)-2*se2
beta0+beta1*mean(x)-se2
beta0+beta1*mean(x)-se2
beta0+beta1*mean(x)-2*se2
beta0+beta1*xcar-2*se2
se2 <- sigma*sqrt(1 + 1 / n + (2 - mean(x))^2/sum((x-mean(x))^2))
beta0+beta1*xcar-2*se2
mean(y)
beta0+beta1*2
int <- beta0+beta1*2
int - mean(y)
library(data.table)
x <- matrix(1:10, 2, 3)
x <- data.table(x)
x
colNames(x) <- c("x", "y", "z")
names(x) <- c("x", "y", "z")
x <- data.table(x, key = c("x", "y", "z"))
x
tables()
x <- data.table(x, cols = c("x", "y", "z"))
x
x <- matrix(1:10, 2, 3)
x <- data.table(x, key = c("x", "y", "z"))
x
x <- matrix(1:10, 2, 3)
x <- data.table(x, key = c("x", "y", "z"))
library(data.table)
x <- matrix(1:10, 2, 3)
x <- data.table(x, key = c("x", "y", "z"))
m <- matrix(1:10, 2, 3)
m <- data.table(m, key = c("x", "y", "z"))
m <- data.table(m, names = c("x", "y", "z"))
m
m <- data.table(m, check.names = c("x", "y", "z"))
m
m <- data.table(m, check.names = TRUE)
m
names(m)
names(m) <- c("x", "y", "z")
names(m) <- c("x", "y", "z", "t")
m
setnames(m) <- c("x", "y", "z", "t")
setnames(m, c("x", "y", "z", "t"))
m
setnames(m, c("x", "y", "z", "t1"))
m
m
m[1:2,]
m[,1:2]
m[,list(,x,y)]
m[,list(x,y)]
m[,list(x,y,z)]
m[,mean(x)]
m[,mean(y)]
m[,mean(z)]
m[,new <- mean(z)]
m[,new <- mean(z), by = x]
m[,new = mean(z), by = x]
m <- matrix(1:10, 2, 3)
m <- data.table(m)
setnames(m, c("x", "y", "z"))
m
m[,new := mean(z), by = x]
m
setwd("~/Documents/Computing/Data Science/Data Science - Johns Hopkins/8 - Practical Machine Learning/Assignments/Course Project")
install.packages("doParallel")
setwd("~/Documents/Computing/Data Science/Data Science - Johns Hopkins/8 - Practical Machine Learning/Assignments/Course Project")
